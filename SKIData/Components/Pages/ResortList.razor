@page "/resorts"
@rendermode InteractiveServer
@inject Data.SkiResortContext Db
@using Microsoft.EntityFrameworkCore
@using SKIData.Model

<h3>Ski Resorts</h3>

@if (items is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        @foreach (var item in items)
        {
            <div class="col-12 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@item.Name <small class="text-muted">(@item.Zipcode)</small></h5>
                        <p class="card-text">@item.Description</p>

                        <div class="mt-2">
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(item.Id)">
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<SkiResort>? items;
    [Inject] private IJSRuntime Js { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsAsync();
    }

    private async Task LoadItemsAsync()
    {
        items = await Db.SkiResorts.AsNoTracking().OrderBy(r => r.Name).ToListAsync();
    }

    private async Task ConfirmDelete(int id)
    {
        var ok = await Js.InvokeAsync<bool>("confirm", "Delete this resort permanently?");
        if (!ok) return;
        await DeleteAsync(id);
    }

    private async Task DeleteAsync(int id)
    {
        var entity = await Db.SkiResorts.FindAsync(id);
        if (entity == null) return;
        Db.SkiResorts.Remove(entity);
        await Db.SaveChangesAsync();
        items?.RemoveAll(r => r.Id == id);
        StateHasChanged();
    }
}